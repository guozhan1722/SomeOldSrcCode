diff -Nuar linux_old/arch/arm/mach-ixp4xx/include/mach/hardware.h linux_new/arch/arm/mach-ixp4xx/include/mach/hardware.h
--- linux_old/arch/arm/mach-ixp4xx/include/mach/hardware.h	2010-04-05 08:56:13.000000000 -0600
+++ linux_new/arch/arm/mach-ixp4xx/include/mach/hardware.h	2010-04-05 08:40:12.000000000 -0600
@@ -39,6 +39,7 @@
 
 /* Platform specific details */
 #include "ixdp425.h"
+#include "vip.h"
 #include "avila.h"
 #include "coyote.h"
 #include "prpmc1100.h"
diff -Nuar linux_old/arch/arm/mach-ixp4xx/include/mach/irqs.h linux_new/arch/arm/mach-ixp4xx/include/mach/irqs.h
--- linux_old/arch/arm/mach-ixp4xx/include/mach/irqs.h	2010-04-05 08:56:13.000000000 -0600
+++ linux_new/arch/arm/mach-ixp4xx/include/mach/irqs.h	2010-04-05 08:40:12.000000000 -0600
@@ -86,6 +86,11 @@
 #define	IRQ_AVILA_PCI_INTC	IRQ_IXP4XX_GPIO9
 #define	IRQ_AVILA_PCI_INTD	IRQ_IXP4XX_GPIO8
 
+/*
+ * Microhard VIP board IRQs
+ */
+#define	IRQ_VIP_PCI_INTA	IRQ_IXP4XX_GPIO6
+#define	IRQ_VIP_PCI_INTB	IRQ_IXP4XX_GPIO7
 
 /*
  * PrPMC1100 Board IRQs
diff -Nuar linux_old/arch/arm/mach-ixp4xx/include/mach/vip.h linux_new/arch/arm/mach-ixp4xx/include/mach/vip.h
--- linux_old/arch/arm/mach-ixp4xx/include/mach/vip.h	1969-12-31 17:00:00.000000000 -0700
+++ linux_new/arch/arm/mach-ixp4xx/include/mach/vip.h	2010-04-05 08:40:12.000000000 -0600
@@ -0,0 +1,36 @@
+/*
+ * include/asm-arm/arch-ixp4xx/vip.h
+ *
+ * Microhard VIP platform specific definitions
+ *
+ * Author: Michael-Luke Jones <mlj28@cam.ac.uk>
+ *
+ * Based on ixdp425.h
+ * Author: Deepak Saxena <dsaxena@plexity.net>
+ *
+ * Copyright 2004 (c) MontaVista, Software, Inc.
+ *
+ * This file is licensed under  the terms of the GNU General Public
+ * License version 2. This program is licensed "as is" without any
+ * warranty of any kind, whether express or implied.
+ */
+
+#ifndef __ASM_ARCH_HARDWARE_H__
+#error "Do not include this directly, instead #include <asm/hardware.h>"
+#endif
+
+/*
+ * VIP PCI IRQs
+ */
+#define VIP_PCI_MAX_DEV	4
+#define VIP_PCI_IRQ_LINES	4
+
+
+/* PCI controller GPIO to IRQ pin mappings */
+#define VIP_PCI_INTA_PIN	6
+#define VIP_PCI_INTB_PIN	7
+
+#define	VIPnnnn_PCI_SLOT0_DEVID	12
+#define	VIPnnnn_PCI_SLOT1_DEVID	13
+
+
diff -Nuar linux_old/arch/arm/mach-ixp4xx/Kconfig linux_new/arch/arm/mach-ixp4xx/Kconfig
--- linux_old/arch/arm/mach-ixp4xx/Kconfig	2010-04-05 08:56:13.000000000 -0600
+++ linux_new/arch/arm/mach-ixp4xx/Kconfig	2010-04-05 08:40:12.000000000 -0600
@@ -17,6 +17,14 @@
 	  NSLU2 NAS device. For more information on this platform,
 	  see http://www.nslu2-linux.org
 
+config MACH_VIP
+	bool "VIPnnnn"
+	select PCI
+	help
+	  Say 'Y' here if you want your kernel to support the Microhard
+	  VIPnnnn Platform. For more information on this platform,
+	  see <file:Documentation/arm/IXP4xx>.
+
 config MACH_AVILA
 	bool "Avila"
 	select PCI
diff -Nuar linux_old/arch/arm/mach-ixp4xx/Makefile linux_new/arch/arm/mach-ixp4xx/Makefile
--- linux_old/arch/arm/mach-ixp4xx/Makefile	2010-04-05 08:56:11.000000000 -0600
+++ linux_new/arch/arm/mach-ixp4xx/Makefile	2010-04-05 08:40:12.000000000 -0600
@@ -6,6 +6,7 @@
 obj-pci-n	:=
 
 obj-pci-$(CONFIG_ARCH_IXDP4XX)		+= ixdp425-pci.o
+obj-pci-$(CONFIG_MACH_VIP)		+= vip-pci.o
 obj-pci-$(CONFIG_MACH_AVILA)		+= avila-pci.o
 obj-pci-$(CONFIG_MACH_CAMBRIA)		+= cambria-pci.o
 obj-pci-$(CONFIG_MACH_IXDPG425)		+= ixdpg425-pci.o
@@ -30,6 +31,7 @@
 obj-y	+= common.o
 
 obj-$(CONFIG_ARCH_IXDP4XX)	+= ixdp425-setup.o
+obj-$(CONFIG_MACH_VIP)	        += vip-setup.o
 obj-$(CONFIG_MACH_AVILA)	+= avila-setup.o
 obj-$(CONFIG_MACH_CAMBRIA)	+= cambria-setup.o
 obj-$(CONFIG_MACH_IXDPG425)	+= coyote-setup.o
diff -Nuar linux_old/arch/arm/mach-ixp4xx/vip-pci.c linux_new/arch/arm/mach-ixp4xx/vip-pci.c
--- linux_old/arch/arm/mach-ixp4xx/vip-pci.c	1969-12-31 17:00:00.000000000 -0700
+++ linux_new/arch/arm/mach-ixp4xx/vip-pci.c	2010-04-05 08:40:12.000000000 -0600
@@ -0,0 +1,69 @@
+/*
+ * arch/arm/mach-ixp4xx/vip-pci.c
+ *
+ * Microhard VIP board-level PCI initialization
+ *
+ * Author: Michael-Luke Jones <mlj28@cam.ac.uk>
+ *
+ * Based on ixdp-pci.c
+ * Copyright (C) 2002 Intel Corporation.
+ * Copyright (C) 2003-2004 MontaVista Software, Inc.
+ *
+ * Maintainer: Deepak Saxena <dsaxena@plexity.net>
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 2 as
+ * published by the Free Software Foundation.
+ *
+ */
+
+#include <linux/kernel.h>
+#include <linux/pci.h>
+#include <linux/init.h>
+#include <linux/irq.h>
+#include <linux/delay.h>
+
+#include <asm/mach/pci.h>
+#include <asm/irq.h>
+#include <mach/hardware.h>
+#include <asm/mach-types.h>
+
+void __init vip_pci_preinit(void)
+{
+	set_irq_type(IRQ_VIP_PCI_INTA, IRQ_TYPE_LEVEL_LOW);
+	set_irq_type(IRQ_VIP_PCI_INTB, IRQ_TYPE_LEVEL_LOW);
+
+	gpio_line_config(10, IXP4XX_GPIO_IN);
+
+	ixp4xx_pci_preinit();
+}
+
+static int __init vip_map_irq(struct pci_dev *dev, u8 slot, u8 pin)
+{
+	if (slot == 12 || slot == 13)
+		return IRQ_IXP4XX_GPIO7;
+	else if (slot == 14)
+		return IRQ_IXP4XX_GPIO6;
+	else return -1;
+}
+
+
+struct hw_pci vip_pci __initdata = {
+	.nr_controllers = 1,
+	.preinit	= vip_pci_preinit,
+	.swizzle	= pci_std_swizzle,
+	.setup		= ixp4xx_setup,
+	.scan		= ixp4xx_scan_bus,
+	.map_irq	= vip_map_irq,
+};
+
+int __init vip_pci_init(void)
+{
+	if (machine_is_vip())
+		pci_common_init(&vip_pci);
+	return 0;
+}
+
+subsys_initcall(vip_pci_init);
+
+
diff -Nuar linux_old/arch/arm/mach-ixp4xx/vip-setup.c linux_new/arch/arm/mach-ixp4xx/vip-setup.c
--- linux_old/arch/arm/mach-ixp4xx/vip-setup.c	1969-12-31 17:00:00.000000000 -0700
+++ linux_new/arch/arm/mach-ixp4xx/vip-setup.c	2010-04-05 08:40:12.000000000 -0600
@@ -0,0 +1,318 @@
+/*
+ * arch/arm/mach-ixp4xx/vip-setup.c
+ *
+ * Microhard VIP board-setup
+ *
+ * Author: Michael-Luke Jones <mlj28@cam.ac.uk>
+ *
+ * Based on ixdp-setup.c
+ * Copyright (C) 2003-2005 MontaVista Software, Inc.
+ *
+ * Author: Deepak Saxena <dsaxena@plexity.net>
+ */
+
+#include <linux/kernel.h>
+#include <linux/init.h>
+#include <linux/device.h>
+#include <linux/if_ether.h>
+#include <linux/socket.h>
+#include <linux/netdevice.h>
+#include <linux/serial.h>
+#include <linux/tty.h>
+#include <linux/serial_8250.h>
+#include <linux/slab.h>
+#include <linux/i2c.h>
+#include <linux/i2c/at24.h>
+
+#include <linux/leds.h>
+#include <linux/i2c-gpio.h>
+
+#include <asm/types.h>
+#include <asm/setup.h>
+#include <asm/memory.h>
+#include <mach/hardware.h>
+#include <asm/mach-types.h>
+#include <asm/irq.h>
+#include <asm/mach/arch.h>
+#include <asm/mach/flash.h>
+
+struct vip_board_info {
+	unsigned char	*model;
+	void		(*setup)(void);
+};
+
+static struct vip_board_info *vip_info __initdata;
+
+static struct flash_platform_data vip_flash_data = {
+	.map_name	= "cfi_probe",
+	.width		= 2,
+};
+
+static struct resource vip_flash_resource = {
+	.flags		= IORESOURCE_MEM,
+};
+
+static struct platform_device vip_flash = {
+	.name		= "IXP4XX-Flash",
+	.id		= 0,
+	.dev		= {
+		.platform_data = &vip_flash_data,
+	},
+	.num_resources	= 1,
+	.resource	= &vip_flash_resource,
+};
+
+static struct resource vip_uart_resources[] = {
+	{
+		.start		= IXP4XX_UART1_BASE_PHYS,
+		.end		= IXP4XX_UART1_BASE_PHYS + 0x0fff,
+		.flags		= IORESOURCE_MEM
+	},
+	{
+		.start		= IXP4XX_UART2_BASE_PHYS,
+		.end		= IXP4XX_UART2_BASE_PHYS + 0x0fff,
+		.flags		= IORESOURCE_MEM
+	},
+	{
+		.flags		= IORESOURCE_MEM
+	},
+	{
+		.flags		= IORESOURCE_MEM
+	},
+	{
+		.flags		= IORESOURCE_MEM
+	},
+	{
+		.flags		= IORESOURCE_MEM
+	}
+};
+
+static struct plat_serial8250_port vip_uart_data[] = {
+	{
+		.mapbase	= IXP4XX_UART1_BASE_PHYS,
+		.membase	= (char *)IXP4XX_UART1_BASE_VIRT + REG_OFFSET,
+		.irq		= IRQ_IXP4XX_UART1,
+		.flags		= UPF_BOOT_AUTOCONF | UPF_SKIP_TEST,
+		.iotype		= UPIO_MEM,
+		.regshift	= 2,
+		.uartclk	= IXP4XX_UART_XTAL,
+	},
+	{
+		.mapbase	= IXP4XX_UART2_BASE_PHYS,
+		.membase	= (char *)IXP4XX_UART2_BASE_VIRT + REG_OFFSET,
+		.irq		= IRQ_IXP4XX_UART2,
+		.flags		= UPF_BOOT_AUTOCONF | UPF_SKIP_TEST,
+		.iotype		= UPIO_MEM,
+		.regshift	= 2,
+		.uartclk	= IXP4XX_UART_XTAL,
+	},
+	{
+		.irq		= IRQ_IXP4XX_GPIO9,
+		.flags		= UPF_BOOT_AUTOCONF | UPF_SKIP_TEST,
+		.iotype		= UPIO_MEM,
+		.regshift	= 2,
+		.uartclk	= IXP4XX_UART_XTAL,
+	},
+	{
+		.irq		= IRQ_IXP4XX_GPIO10,
+		.flags		= UPF_BOOT_AUTOCONF | UPF_SKIP_TEST,
+		.iotype		= UPIO_MEM,
+		.regshift	= 2,
+		.uartclk	= IXP4XX_UART_XTAL,
+	},
+	{
+		.irq		= IRQ_IXP4XX_GPIO11,
+		.flags		= UPF_BOOT_AUTOCONF | UPF_SKIP_TEST,
+		.iotype		= UPIO_MEM,
+		.regshift	= 2,
+		.uartclk	= IXP4XX_UART_XTAL,
+	},
+	{
+		.irq		= IRQ_IXP4XX_GPIO12,
+		.flags		= UPF_BOOT_AUTOCONF | UPF_SKIP_TEST,
+		.iotype		= UPIO_MEM,
+		.regshift	= 2,
+		.uartclk	= IXP4XX_UART_XTAL,
+	},
+	{ },
+};
+
+static struct platform_device vip_uart = {
+	.name			= "serial8250",
+	.id			= PLAT8250_DEV_PLATFORM,
+	.dev.platform_data	= vip_uart_data,
+	.num_resources		= 6,
+	.resource		= vip_uart_resources
+};
+
+/* Built-in 10/100 Ethernet MAC interfaces */
+static struct eth_plat_info vip_npeb_data = {
+	.phy		= 3,
+	.rxq		= 3,
+	.txreadyq	= 20,
+};
+
+static struct eth_plat_info vip_npec_data = {
+	.phy		= 1,
+	.rxq		= 4,
+	.txreadyq	= 21,
+};
+
+static struct platform_device vip_npeb_device = {
+	.name			= "ixp4xx_eth",
+	.id			= IXP4XX_ETH_NPEB,
+	.dev.platform_data	= &vip_npeb_data,
+};
+
+static struct platform_device vip_npec_device = {
+	.name			= "ixp4xx_eth",
+	.id			= IXP4XX_ETH_NPEC,
+	.dev.platform_data	= &vip_npec_data,
+};
+
+
+static struct platform_device *vip_devices[] __initdata = {
+	&vip_flash,
+	&vip_uart,
+};
+
+static void __init vip_board_setup(void)
+{
+	platform_device_register(&vip_npeb_device);
+	platform_device_register(&vip_npec_device);
+
+}
+static struct vip_board_info vip_boards[] __initdata = {
+	{
+		.model		= "vip_board",
+		.setup		= vip_board_setup,
+	}
+};
+
+static struct vip_board_info * __init vip_find_board_info(char *model)
+{
+	int i;
+	model[6] = '\0';
+
+	for (i = 0; i < ARRAY_SIZE(vip_boards); i++) {
+		struct vip_board_info *info = &vip_boards[i];
+		if (strcmp(info->model, model) == 0)
+			return info;
+	}
+
+	return NULL;
+}
+
+static struct memory_accessor *at24_mem_acc;
+
+static void at24_setup(struct memory_accessor *mem_acc, void *context)
+{
+	char mac_addr[ETH_ALEN];
+	char model[7];
+
+	at24_mem_acc = mem_acc;
+
+	/* Read MAC addresses */
+	if (at24_mem_acc->read(at24_mem_acc, mac_addr, 0x0, 6) == 6) {
+		memcpy(&vip_npeb_data.hwaddr, mac_addr, ETH_ALEN);
+	}
+	if (at24_mem_acc->read(at24_mem_acc, mac_addr, 0x6, 6) == 6) {
+		memcpy(&vip_npec_data.hwaddr, mac_addr, ETH_ALEN);
+	}
+
+	/* Read the first 6 bytes of the model number */
+	if (at24_mem_acc->read(at24_mem_acc, model, 0x20, 6) == 6) {
+		vip_info = vip_find_board_info(model);
+	}
+
+}
+
+
+static void __init vip_init(void)
+{
+	unsigned char *mem;
+
+	ixp4xx_sys_init();
+
+	/* VIP hardware setup ... */
+
+	/* the nano controls are on CS 1 */
+	*IXP4XX_EXP_CS1 = 0xbfff0003;
+	mem = (unsigned char *)ioremap(IXP4XX_EXP_BUS_BASE(1), 0x200);
+	*mem = 0x0; // reset the nano and the additional UARTs
+
+	/* the leds are on CS 2 */
+	*IXP4XX_EXP_CS2 = 0xbfff0003;
+	mem = (unsigned char *)ioremap(IXP4XX_EXP_BUS_BASE(2), 0x200);
+	*mem = 0xfe;
+
+	/* the nano 1 data port on CS 3 */
+	*IXP4XX_EXP_CS3 = 0xbfff0003;
+	vip_uart_data[2].mapbase = IXP4XX_EXP_BUS_BASE(3);
+	vip_uart_data[2].membase = ioremap(IXP4XX_EXP_BUS_BASE(3), 0x200);
+	vip_uart_resources[2].start = IXP4XX_EXP_BUS_BASE(3);
+	vip_uart_resources[2].end = IXP4XX_EXP_BUS_BASE(3) + 0x1FF;
+
+	/* the nano 1 diag port on CS 4 */
+	*IXP4XX_EXP_CS4 = 0xbfff0003;
+	vip_uart_data[3].mapbase = IXP4XX_EXP_BUS_BASE(4);
+	vip_uart_data[3].membase = ioremap(IXP4XX_EXP_BUS_BASE(4), 0x200);
+	vip_uart_resources[3].start = IXP4XX_EXP_BUS_BASE(4);
+	vip_uart_resources[3].end = IXP4XX_EXP_BUS_BASE(4) + 0x1FF;
+
+	/* the nano 2 data port on CS 5 */
+       *IXP4XX_EXP_CS5 = 0xbfff0003;
+	vip_uart_data[4].mapbase = IXP4XX_EXP_BUS_BASE(5);
+	vip_uart_data[4].membase = ioremap(IXP4XX_EXP_BUS_BASE(5), 0x200);
+	vip_uart_resources[4].start = IXP4XX_EXP_BUS_BASE(5);
+	vip_uart_resources[4].end = IXP4XX_EXP_BUS_BASE(5) + 0x1FF;
+
+	/* the nano 2 diag port on CS 6 */
+	*IXP4XX_EXP_CS6 = 0xbfff0003;
+	vip_uart_data[5].mapbase = IXP4XX_EXP_BUS_BASE(6);
+	vip_uart_data[5].membase = ioremap(IXP4XX_EXP_BUS_BASE(6), 0x200);
+	vip_uart_resources[5].start = IXP4XX_EXP_BUS_BASE(6);
+	vip_uart_resources[5].end = IXP4XX_EXP_BUS_BASE(6) + 0x1FF;
+
+	/*
+	 * These devices are present on all Avila models and don't need any
+	 * model specific setup.
+	 */
+	vip_flash_resource.start = IXP4XX_EXP_BUS_BASE(0);
+	vip_flash_resource.end =
+		IXP4XX_EXP_BUS_BASE(0) + ixp4xx_exp_bus_size - 1;
+
+	platform_add_devices(vip_devices, ARRAY_SIZE(vip_devices));
+
+}
+
+static int __init vip_model_setup(void)
+{
+	if (!machine_is_vip())
+		return 0;
+
+	if (vip_info) {
+		printk(KERN_DEBUG "Running on Microhard %s\n",
+							vip_info->model);
+		vip_info->setup();
+	} else {
+		printk(KERN_INFO "Unknown/missing  model number"
+						" -- defaults will be used\n");
+		vip_board_setup();
+	}
+
+	return 0;
+}
+late_initcall(vip_model_setup);
+
+MACHINE_START(VIP, "Microhard VIP Network Platform")
+	/* Maintainer: Deepak Saxena <dsaxena@plexity.net> */
+	.phys_io	= IXP4XX_PERIPHERAL_BASE_PHYS,
+	.io_pg_offst	= ((IXP4XX_PERIPHERAL_BASE_VIRT) >> 18) & 0xfffc,
+	.map_io		= ixp4xx_map_io,
+	.init_irq	= ixp4xx_init_irq,
+	.timer		= &ixp4xx_timer,
+	.boot_params	= 0x0100,
+	.init_machine	= vip_init,
+MACHINE_END
+
diff -Nuar linux_old/arch/arm/tools/mach-types linux_new/arch/arm/tools/mach-types
--- linux_old/arch/arm/tools/mach-types	2010-04-05 08:56:30.000000000 -0600
+++ linux_new/arch/arm/tools/mach-types	2010-04-05 08:42:41.000000000 -0600
@@ -1330,7 +1330,7 @@
 comtech_router		MACH_COMTECH_ROUTER	COMTECH_ROUTER		1327
 sbc2410x		MACH_SBC2410X		SBC2410X		1328
 at4x0bd			MACH_AT4X0BD		AT4X0BD			1329
-cbifr			MACH_CBIFR		CBIFR			1330
+vip			MACH_VIP		VIP			1330
 arcom_quantum		MACH_ARCOM_QUANTUM	ARCOM_QUANTUM		1331
 matrix520		MACH_MATRIX520		MATRIX520		1332
 matrix510		MACH_MATRIX510		MATRIX510		1333
