diff -Nuar linux-2.6.30.10.bak/arch/arm/kernel/setup.c linux-2.6.30.10/arch/arm/kernel/setup.c
--- linux-2.6.30.10.bak/arch/arm/kernel/setup.c	2010-08-20 13:49:53.000000000 -0600
+++ linux-2.6.30.10/arch/arm/kernel/setup.c	2010-08-20 13:51:35.000000000 -0600
@@ -85,6 +85,11 @@
 unsigned int elf_hwcap;
 EXPORT_SYMBOL(elf_hwcap);
 
+unsigned int console_quiet=2;
+EXPORT_SYMBOL(console_quiet);
+
+unsigned int super_user=0;
+EXPORT_SYMBOL(super_user);
 
 #ifdef MULTI_CPU
 struct processor processor;
@@ -296,9 +301,9 @@
 	cpu_cache = *list->cache;
 #endif
 
-	printk("CPU: %s [%08x] revision %d (ARMv%s), cr=%08lx\n",
-	       cpu_name, read_cpuid_id(), read_cpuid_id() & 15,
-	       proc_arch[cpu_architecture()], cr_alignment);
+//	printk("CPU: %s [%08x] revision %d (ARMv%s), cr=%08lx\n",
+//	       cpu_name, read_cpuid_id(), read_cpuid_id() & 15,
+//	       proc_arch[cpu_architecture()], cr_alignment);
 
 	sprintf(init_utsname()->machine, "%s%c", list->arch_name, ENDIANNESS);
 	sprintf(elf_platform, "%s%c", list->elf_name, ENDIANNESS);
@@ -363,11 +368,17 @@
 		while (1);
 	}
 
-	printk("Machine: %s\n", list->name);
+//	printk("Machine: %s\n", list->name);
 
 	return list;
 }
 
+static void __init con_quiet(char **p)
+{
+	console_quiet = memparse(*p, p);
+}
+__early_param("console_quiet=", con_quiet);
+
 static int __init arm_add_memory(unsigned long start, unsigned long size)
 {
 	struct membank *bank = &meminfo.bank[meminfo.nr_banks];
diff -Nuar linux-2.6.30.10.bak/arch/arm/mach-ixp4xx/include/mach/hardware.h linux-2.6.30.10/arch/arm/mach-ixp4xx/include/mach/hardware.h
--- linux-2.6.30.10.bak/arch/arm/mach-ixp4xx/include/mach/hardware.h	2010-08-20 13:49:55.000000000 -0600
+++ linux-2.6.30.10/arch/arm/mach-ixp4xx/include/mach/hardware.h	2010-08-20 13:51:35.000000000 -0600
@@ -39,6 +39,7 @@
 
 /* Platform specific details */
 #include "ixdp425.h"
+#include "vip.h"
 #include "avila.h"
 #include "coyote.h"
 #include "prpmc1100.h"
diff -Nuar linux-2.6.30.10.bak/arch/arm/mach-ixp4xx/include/mach/irqs.h linux-2.6.30.10/arch/arm/mach-ixp4xx/include/mach/irqs.h
--- linux-2.6.30.10.bak/arch/arm/mach-ixp4xx/include/mach/irqs.h	2010-08-20 13:49:55.000000000 -0600
+++ linux-2.6.30.10/arch/arm/mach-ixp4xx/include/mach/irqs.h	2010-08-20 13:51:35.000000000 -0600
@@ -86,6 +86,13 @@
 #define	IRQ_AVILA_PCI_INTC	IRQ_IXP4XX_GPIO9
 #define	IRQ_AVILA_PCI_INTD	IRQ_IXP4XX_GPIO8
 
+/*
+ * Microhard VIP board IRQs
+ */
+#define	IRQ_VIP_PCI_INTA	IRQ_IXP4XX_GPIO6
+#define	IRQ_VIP_PCI_INTB	IRQ_IXP4XX_GPIO7
+#define	IRQ_VIP_PCI_INTC	IRQ_IXP4XX_GPIO4
+#define	IRQ_VIP_PCI_INTD	IRQ_IXP4XX_GPIO5
 
 /*
  * PrPMC1100 Board IRQs
diff -Nuar linux-2.6.30.10.bak/arch/arm/mach-ixp4xx/include/mach/uncompress.h linux-2.6.30.10/arch/arm/mach-ixp4xx/include/mach/uncompress.h
--- linux-2.6.30.10.bak/arch/arm/mach-ixp4xx/include/mach/uncompress.h	2010-08-20 13:49:55.000000000 -0600
+++ linux-2.6.30.10/arch/arm/mach-ixp4xx/include/mach/uncompress.h	2010-08-20 13:51:35.000000000 -0600
@@ -25,10 +25,12 @@
 {
 	/* Check THRE and TEMT bits before we transmit the character.
 	 */
-	while ((uart_base[UART_LSR] & TX_DONE) != TX_DONE)
+#if 0
+    while ((uart_base[UART_LSR] & TX_DONE) != TX_DONE)
 		barrier();
 
 	*uart_base = c;
+#endif
 }
 
 static void flush(void)
diff -Nuar linux-2.6.30.10.bak/arch/arm/mach-ixp4xx/include/mach/vip.h linux-2.6.30.10/arch/arm/mach-ixp4xx/include/mach/vip.h
--- linux-2.6.30.10.bak/arch/arm/mach-ixp4xx/include/mach/vip.h	1969-12-31 17:00:00.000000000 -0700
+++ linux-2.6.30.10/arch/arm/mach-ixp4xx/include/mach/vip.h	2010-08-20 13:51:35.000000000 -0600
@@ -0,0 +1,36 @@
+/*
+ * include/asm-arm/arch-ixp4xx/vip.h
+ *
+ * Microhard VIP platform specific definitions
+ *
+ * Author: Michael-Luke Jones <mlj28@cam.ac.uk>
+ *
+ * Based on ixdp425.h
+ * Author: Deepak Saxena <dsaxena@plexity.net>
+ *
+ * Copyright 2004 (c) MontaVista, Software, Inc.
+ *
+ * This file is licensed under  the terms of the GNU General Public
+ * License version 2. This program is licensed "as is" without any
+ * warranty of any kind, whether express or implied.
+ */
+
+#ifndef __ASM_ARCH_HARDWARE_H__
+#error "Do not include this directly, instead #include <asm/hardware.h>"
+#endif
+
+/*
+ * VIP PCI IRQs
+ */
+#define VIP_PCI_MAX_DEV	4
+#define VIP_PCI_IRQ_LINES	4
+
+
+/* PCI controller GPIO to IRQ pin mappings */
+#define VIP_PCI_INTA_PIN	6
+#define VIP_PCI_INTB_PIN	7
+
+#define	VIPnnnn_PCI_SLOT0_DEVID	12
+#define	VIPnnnn_PCI_SLOT1_DEVID	13
+
+
diff -Nuar linux-2.6.30.10.bak/arch/arm/mach-ixp4xx/Kconfig linux-2.6.30.10/arch/arm/mach-ixp4xx/Kconfig
--- linux-2.6.30.10.bak/arch/arm/mach-ixp4xx/Kconfig	2010-08-20 13:49:55.000000000 -0600
+++ linux-2.6.30.10/arch/arm/mach-ixp4xx/Kconfig	2010-08-20 13:51:35.000000000 -0600
@@ -17,6 +17,14 @@
 	  NSLU2 NAS device. For more information on this platform,
 	  see http://www.nslu2-linux.org
 
+config MACH_VIP
+	bool "VIPnnnn"
+	select PCI
+	help
+	  Say 'Y' here if you want your kernel to support the Microhard
+	  VIPnnnn Platform. For more information on this platform,
+	  see <file:Documentation/arm/IXP4xx>.
+
 config MACH_AVILA
 	bool "Avila"
 	select PCI
diff -Nuar linux-2.6.30.10.bak/arch/arm/mach-ixp4xx/Makefile linux-2.6.30.10/arch/arm/mach-ixp4xx/Makefile
--- linux-2.6.30.10.bak/arch/arm/mach-ixp4xx/Makefile	2010-08-20 13:49:55.000000000 -0600
+++ linux-2.6.30.10/arch/arm/mach-ixp4xx/Makefile	2010-08-20 13:51:35.000000000 -0600
@@ -6,6 +6,7 @@
 obj-pci-n	:=
 
 obj-pci-$(CONFIG_ARCH_IXDP4XX)		+= ixdp425-pci.o
+obj-pci-$(CONFIG_MACH_VIP)		+= vip-pci.o
 obj-pci-$(CONFIG_MACH_AVILA)		+= avila-pci.o
 obj-pci-$(CONFIG_MACH_CAMBRIA)		+= cambria-pci.o
 obj-pci-$(CONFIG_MACH_IXDPG425)		+= ixdpg425-pci.o
@@ -30,6 +31,7 @@
 obj-y	+= common.o
 
 obj-$(CONFIG_ARCH_IXDP4XX)	+= ixdp425-setup.o
+obj-$(CONFIG_MACH_VIP)	        += vip-setup.o
 obj-$(CONFIG_MACH_AVILA)	+= avila-setup.o
 obj-$(CONFIG_MACH_CAMBRIA)	+= cambria-setup.o
 obj-$(CONFIG_MACH_IXDPG425)	+= coyote-setup.o
diff -Nuar linux-2.6.30.10.bak/arch/arm/mach-ixp4xx/vip-pci.c linux-2.6.30.10/arch/arm/mach-ixp4xx/vip-pci.c
--- linux-2.6.30.10.bak/arch/arm/mach-ixp4xx/vip-pci.c	1969-12-31 17:00:00.000000000 -0700
+++ linux-2.6.30.10/arch/arm/mach-ixp4xx/vip-pci.c	2010-08-20 13:55:58.000000000 -0600
@@ -0,0 +1,94 @@
+/*
+ * arch/arm/mach-ixp4xx/vip-pci.c
+ *
+ * Microhard VIP board-level PCI initialization
+ *
+ * Author: Michael-Luke Jones <mlj28@cam.ac.uk>
+ *
+ * Based on ixdp-pci.c
+ * Copyright (C) 2002 Intel Corporation.
+ * Copyright (C) 2003-2004 MontaVista Software, Inc.
+ *
+ * Maintainer: Deepak Saxena <dsaxena@plexity.net>
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 2 as
+ * published by the Free Software Foundation.
+ *
+ */
+
+#include <linux/kernel.h>
+#include <linux/pci.h>
+#include <linux/init.h>
+#include <linux/irq.h>
+#include <linux/delay.h>
+
+#include <asm/mach/pci.h>
+#include <asm/irq.h>
+#include <mach/hardware.h>
+#include <asm/mach-types.h>
+
+void __init vip_pci_preinit(void)
+{
+	set_irq_type(IRQ_VIP_PCI_INTA, IRQ_TYPE_LEVEL_LOW);
+	set_irq_type(IRQ_VIP_PCI_INTB, IRQ_TYPE_LEVEL_LOW);
+    set_irq_type(IRQ_VIP_PCI_INTC, IRQ_TYPE_LEVEL_LOW);
+    set_irq_type(IRQ_VIP_PCI_INTD, IRQ_TYPE_LEVEL_LOW);
+
+    gpio_line_config(10, IXP4XX_GPIO_IN);
+
+	ixp4xx_pci_preinit();
+}
+
+static int __init vip_map_irq(struct pci_dev *dev, u8 slot, u8 pin)
+{
+
+    int revision = (*IXP4XX_EXP_CFG0 >> 17) & 0xf;
+
+    printk("vip map irq revision = %d\n",revision);
+
+    if(revision == 4 ) {
+        if (slot == 12) 
+            return IRQ_IXP4XX_GPIO7;
+    
+        else if (slot == 13)
+            return IRQ_IXP4XX_GPIO6;
+    
+        else if (slot == 11) 
+            return IRQ_IXP4XX_GPIO4;
+            
+        else if(slot == 10) 
+            return IRQ_IXP4XX_GPIO5;
+    
+        else return -1;
+    } else {
+        if (slot == 12 || slot == 13)
+            return IRQ_IXP4XX_GPIO7;
+        else if (slot == 14)
+            return IRQ_IXP4XX_GPIO6;
+        else
+            return -1;
+
+    } 
+}
+
+
+struct hw_pci vip_pci __initdata = {
+	.nr_controllers = 1,
+	.preinit	= vip_pci_preinit,
+	.swizzle	= pci_std_swizzle,
+	.setup		= ixp4xx_setup,
+	.scan		= ixp4xx_scan_bus,
+	.map_irq	= vip_map_irq,
+};
+
+int __init vip_pci_init(void)
+{
+	if (machine_is_vip())
+		pci_common_init(&vip_pci);
+	return 0;
+}
+
+subsys_initcall(vip_pci_init);
+
+
diff -Nuar linux-2.6.30.10.bak/arch/arm/mach-ixp4xx/vip-setup.c linux-2.6.30.10/arch/arm/mach-ixp4xx/vip-setup.c
--- linux-2.6.30.10.bak/arch/arm/mach-ixp4xx/vip-setup.c	1969-12-31 17:00:00.000000000 -0700
+++ linux-2.6.30.10/arch/arm/mach-ixp4xx/vip-setup.c	2010-08-20 13:55:58.000000000 -0600
@@ -0,0 +1,522 @@
+/*
+ * arch/arm/mach-ixp4xx/vip-setup.c
+ *
+ * Microhard VIP board-setup
+ *
+ * Author: Michael-Luke Jones <mlj28@cam.ac.uk>
+ *
+ * Based on ixdp-setup.c
+ * Copyright (C) 2003-2005 MontaVista Software, Inc.
+ *
+ * Author: Deepak Saxena <dsaxena@plexity.net>
+ */
+
+#include <linux/kernel.h>
+#include <linux/init.h>
+#include <linux/device.h>
+#include <linux/gpio_buttons.h>
+#include <linux/if_ether.h>
+#include <linux/input.h>
+#include <linux/socket.h>
+#include <linux/netdevice.h>
+#include <linux/serial.h>
+#include <linux/tty.h>
+#include <linux/serial_8250.h>
+#include <linux/slab.h>
+
+#include <linux/leds.h>
+#include <linux/i2c-gpio.h>
+#include <linux/delay.h>
+
+#include <asm/types.h>
+#include <asm/setup.h>
+#include <asm/memory.h>
+#include <mach/hardware.h>
+#include <asm/mach-types.h>
+#include <asm/irq.h>
+#include <asm/mach/arch.h>
+#include <asm/mach/flash.h>
+#include <linux/irq.h>
+
+#define VIP_OPTIONAL_UART_XTAL 18432000
+
+struct vip_board_info {
+	unsigned char	*model;
+	void		(*setup)(void);
+};
+
+static struct vip_board_info *vip_info __initdata;
+
+static struct flash_platform_data vip_flash_data = {
+	.map_name	= "cfi_probe",
+	.width		= 2,
+};
+
+static struct resource vip_flash_resource = {
+	.flags		= IORESOURCE_MEM,
+};
+
+static struct platform_device vip_flash = {
+	.name		= "IXP4XX-Flash",
+	.id		= 0,
+	.dev		= {
+		.platform_data = &vip_flash_data,
+	},
+	.num_resources	= 1,
+	.resource	= &vip_flash_resource,
+};
+
+static struct resource vip_uart_resources[] = {
+	{
+		.start		= IXP4XX_UART1_BASE_PHYS,
+		.end		= IXP4XX_UART1_BASE_PHYS + 0x0fff,
+		.flags		= IORESOURCE_MEM
+	},
+	{
+		.start		= IXP4XX_UART2_BASE_PHYS,
+		.end		= IXP4XX_UART2_BASE_PHYS + 0x0fff,
+		.flags		= IORESOURCE_MEM
+	}
+};
+
+static struct plat_serial8250_port vip_uart_data[] = {
+	{
+		.mapbase	= IXP4XX_UART1_BASE_PHYS,
+		.membase	= (char *)IXP4XX_UART1_BASE_VIRT + REG_OFFSET,
+		.irq		= IRQ_IXP4XX_UART1,
+		.flags		= UPF_BOOT_AUTOCONF | UPF_SKIP_TEST,
+		.iotype		= UPIO_MEM,
+		.regshift	= 2,
+		.uartclk	= IXP4XX_UART_XTAL,
+	},
+	{
+		.mapbase	= IXP4XX_UART2_BASE_PHYS,
+		.membase	= (char *)IXP4XX_UART2_BASE_VIRT + REG_OFFSET,
+		.irq		= IRQ_IXP4XX_UART2,
+		.flags		= UPF_BOOT_AUTOCONF | UPF_SKIP_TEST,
+		.iotype		= UPIO_MEM,
+		.regshift	= 2,
+		.uartclk	= IXP4XX_UART_XTAL,
+	},
+	{ },
+};
+
+static struct platform_device vip_uart = {
+	.name			= "serial8250",
+	.id			= PLAT8250_DEV_PLATFORM,
+	.dev.platform_data	= vip_uart_data,
+	.num_resources		= 2,
+	.resource		= vip_uart_resources
+};
+
+static struct resource vip_optional_uart_resources[] = { 
+	{ 
+		.start  = 0x53000000, 
+		.end	= 0x53000fff, 
+		.flags  = IORESOURCE_MEM 
+	}, 
+	{ 
+		.start  = 0x54000000, 
+		.end	= 0x54000fff, 
+		.flags  = IORESOURCE_MEM 
+	},
+	{ 
+		.start  = 0x55000000, 
+		.end	= 0x55000fff, 
+		.flags  = IORESOURCE_MEM 
+	}, 
+	{ 
+		.start  = 0x56000000, 
+		.end	= 0x56000fff, 
+		.flags  = IORESOURCE_MEM 
+	} 
+}; 
+
+static struct plat_serial8250_port vip_optional_uart_data[] = { 
+	{ 
+		.flags          = UPF_BOOT_AUTOCONF | UPF_SKIP_TEST, 
+		.iotype         = UPIO_MEM, 
+		.regshift       = 0, 
+		.uartclk        = VIP_OPTIONAL_UART_XTAL, 
+ 	}, 
+ 	{ 
+		.flags          = UPF_BOOT_AUTOCONF | UPF_SKIP_TEST, 
+		.iotype         = UPIO_MEM, 
+		.regshift       = 0, 
+		.uartclk        = VIP_OPTIONAL_UART_XTAL, 
+ 	}, 
+	{ 
+		.flags          = UPF_BOOT_AUTOCONF | UPF_SKIP_TEST, 
+		.iotype         = UPIO_MEM, 
+		.regshift       = 0, 
+		.uartclk        = VIP_OPTIONAL_UART_XTAL, 
+	}, 
+	{ 
+		.flags          = UPF_BOOT_AUTOCONF | UPF_SKIP_TEST, 
+		.iotype         = UPIO_MEM, 
+		.regshift       = 0, 
+		.uartclk        = VIP_OPTIONAL_UART_XTAL, 
+	}, 
+ 	{ }, 
+}; 
+
+static struct platform_device vip_optional_uart = { 
+	.name           = "serial8250", 
+	.id             = PLAT8250_DEV_PLATFORM1, 
+	.dev.platform_data      = vip_optional_uart_data, 
+	.num_resources  = 4, 
+	.resource       = vip_optional_uart_resources, 
+};
+
+/* Built-in 10/100 Ethernet MAC interfaces */
+// phy=0 used by vip revision 0
+static struct eth_plat_info vip_npeb_data_rev0 = {
+	.phy		= 0,
+	.rxq		= 3,
+	.txreadyq	= 20,
+};
+
+//phy=3 used by revision 2,3(svip board),4(ipmesh board) 
+static struct eth_plat_info vip_npeb_data = {
+	.phy		= 3,
+	.rxq		= 3,
+	.txreadyq	= 20,
+};
+
+static struct eth_plat_info vip_npec_data = {
+	.phy		= 1,
+	.rxq		= 4,
+	.txreadyq	= 21,
+};
+
+//this struct for revision 0 and other board
+static struct platform_device vip_npeb_device_rev0 = {
+	.name			= "ixp4xx_eth",
+	.id			= IXP4XX_ETH_NPEB,
+	.dev.platform_data	= &vip_npeb_data_rev0,
+};
+
+static struct platform_device vip_npeb_device = {
+	.name			= "ixp4xx_eth",
+	.id			= IXP4XX_ETH_NPEB,
+	.dev.platform_data	= &vip_npeb_data,
+};
+
+static struct platform_device vip_npec_device = {
+	.name			= "ixp4xx_eth",
+	.id			= IXP4XX_ETH_NPEC,
+	.dev.platform_data	= &vip_npec_data,
+};
+
+static struct gpio_button vip_gpio_buttons[] = {
+	{
+		.desc		= "config",
+		.type		= EV_KEY,
+		.code		= BTN_0,
+		.active_low = 1,
+		.threshold	= 2,
+		.gpio		= 9, // old VIP use GPIO 9, IPMESH use GPIO13
+	}
+};
+
+static struct gpio_buttons_platform_data vip_gpio_buttons_data = {
+	.poll_interval	= 500,
+	.nbuttons	= 1,
+	.buttons	= vip_gpio_buttons,	
+};
+
+static struct platform_device vip_gpio_buttons_device = {
+	.name			= "gpio-buttons",
+	.id			= -1,
+	.dev.platform_data	= &vip_gpio_buttons_data,
+};
+
+static struct resource vip_gpio_resources[] = {
+	{
+		.name = "gpio",
+		.flags  = 0,
+	},
+};
+
+static struct platform_device vip_gpio = {
+	.name     = "GPIODEV",
+	.id     = -1,
+	.num_resources    = ARRAY_SIZE(vip_gpio_resources),
+	.resource   = vip_gpio_resources,
+};
+
+static struct latch_led vip_latch_cnts[] = {
+	{
+		.name	= "nano1_reset",  /* nano1 reset */
+		.bit	= 0,
+	},
+	{
+		.name	= "nano1_dtr",  /* nano1 Data DTR */
+		.bit	= 1,
+	},
+	{
+		.name	= "nano2_reset",  /* nano2_reset */
+		.bit	= 2,
+	},
+	{
+		.name	= "nano2_dtr",  /* nano2 Data DTR */
+		.bit	= 3,
+	},
+	{
+		.name	= "null",
+		.bit	= 4,			/* null */
+	},
+	{
+		.name	= "nano1_pgm",  /* nano1 program control signal */
+		.bit	= 5,
+	},
+	{
+		.name	= "nano2_pgm",  /* nano2 program control signal */
+		.bit	= 6,
+	},
+	{
+		.name	= "uart_reset",  /* optional uart chip control signal */
+		.bit	= 7,
+	}
+};
+
+static struct latch_led_platform_data vip_latch_cnts_data = {
+	.num_leds	= 8,
+	.leds		= vip_latch_cnts,
+	.mem		= 0x51000000,
+};
+
+static struct platform_device vip_latch_cnts_device = {
+	.name		= "cnts-latch",
+	.id		= -1,
+	.dev.platform_data = &vip_latch_cnts_data,
+};
+
+static struct latch_led vip_latch_leds[] = {
+	{
+		.name	= "user",  /* green led */
+		.bit	= 0,
+	},
+	{
+		.name	= "rssi1",  /* green led */
+		.bit	= 1,
+	},
+	{
+		.name	= "rssi2",  /* green led */
+		.bit	= 2,
+	},
+	{
+		.name	= "rssi3",  /* green led */
+		.bit	= 3,
+	},
+	{
+		.name	= "dcd",  /* DCD0_i control signal */
+		.bit	= 4,
+	},
+	{
+		.name	= "dsr",  /* DSR0_i control signal */
+		.bit	= 5,
+	},
+	{
+		.name	= "re_485",  /* RE_485 control signal */
+		.bit	= 6,
+	},
+	{
+		.name	= "de_485",  /* DE_485 control signal */
+		.bit	= 7,
+	}
+};
+
+static struct latch_led_platform_data vip_latch_leds_data = {
+	.num_leds	= 8,
+	.leds		= vip_latch_leds,
+	.mem		= 0x52000000,
+};
+
+static struct platform_device vip_latch_leds_device = {
+	.name		= "leds-latch",
+	.id		= -1,
+	.dev.platform_data = &vip_latch_leds_data,
+};
+
+static struct platform_device *vip_devices[] __initdata = {
+	&vip_flash,
+	&vip_uart,
+};
+
+static void __init vip_board_ipmesh_setup(void)
+{
+	unsigned char *mem;
+
+	*IXP4XX_EXP_CS1 = 0xbfff3c03; 
+
+	mem = (unsigned char *)ioremap(IXP4XX_EXP_BUS_BASE(1), 0x200);
+	*mem = 0x80; // reset the nano and the additional UARTs
+	udelay(1);
+	*mem = 0x75; // normal working mode, please see the schematics
+
+	platform_device_register(&vip_latch_cnts_device);
+
+	*IXP4XX_EXP_CS3 = 0xbfff0003; 
+	set_irq_type(IRQ_IXP4XX_GPIO9, IRQ_TYPE_EDGE_BOTH); 
+	vip_optional_uart_data[0].mapbase   = IXP4XX_EXP_BUS_BASE(3); 
+	vip_optional_uart_data[0].membase   = (void __iomem *)ioremap(IXP4XX_EXP_BUS_BASE(3), 0x0fff); 
+	vip_optional_uart_data[0].irq       = IRQ_IXP4XX_GPIO9; 
+
+	*IXP4XX_EXP_CS4 = 0xbfff0003; 
+	set_irq_type(IRQ_IXP4XX_GPIO10, IRQ_TYPE_EDGE_BOTH); 
+	vip_optional_uart_data[1].mapbase   = IXP4XX_EXP_BUS_BASE(4); 
+	vip_optional_uart_data[1].membase   = (void __iomem *)ioremap(IXP4XX_EXP_BUS_BASE(4), 0x0fff); 
+	vip_optional_uart_data[1].irq       = IRQ_IXP4XX_GPIO10; 
+
+	*IXP4XX_EXP_CS5 = 0xbfff0003; 
+	set_irq_type(IRQ_IXP4XX_GPIO11, IRQ_TYPE_EDGE_BOTH); 
+	vip_optional_uart_data[2].mapbase   = IXP4XX_EXP_BUS_BASE(5); 
+	vip_optional_uart_data[2].membase   = (void __iomem *)ioremap(IXP4XX_EXP_BUS_BASE(5), 0x0fff); 
+	vip_optional_uart_data[2].irq       = IRQ_IXP4XX_GPIO11; 
+
+	*IXP4XX_EXP_CS6 = 0xbfff0003; 
+	set_irq_type(IRQ_IXP4XX_GPIO12, IRQ_TYPE_EDGE_BOTH); 
+	vip_optional_uart_data[3].mapbase   = IXP4XX_EXP_BUS_BASE(6); 
+	vip_optional_uart_data[3].membase   = (void __iomem *)ioremap(IXP4XX_EXP_BUS_BASE(6), 0x0fff); 
+	vip_optional_uart_data[3].irq       = IRQ_IXP4XX_GPIO12; 
+
+	vip_gpio_resources[0].start = (1 << 9) | (1 << 10) | (1 << 11) | (1 << 12) | (1 << 13);
+	vip_gpio_resources[0].end = vip_gpio_resources[0].start;
+
+	platform_device_register(&vip_gpio);
+
+	platform_device_register(&vip_optional_uart);
+
+	platform_device_register(&vip_npeb_device);
+	platform_device_register(&vip_npec_device);
+
+	*IXP4XX_EXP_CS2 = 0xbfff0003; 
+	platform_device_register(&vip_latch_leds_device);
+
+	vip_gpio_buttons_data.buttons[0].gpio = 13;
+	platform_device_register(&vip_gpio_buttons_device);
+
+}
+
+static void __init vip_board_setup(void)
+{
+
+	vip_gpio_resources[0].start = (1 << 9);
+	vip_gpio_resources[0].end = vip_gpio_resources[0].start;
+
+	platform_device_register(&vip_gpio);
+
+	platform_device_register(&vip_npeb_device);
+	platform_device_register(&vip_npec_device);
+
+	vip_gpio_buttons_data.buttons[0].gpio = 9;
+	platform_device_register(&vip_gpio_buttons_device);
+
+}
+
+static void __init vip_board_rev0_setup(void)
+{
+	vip_gpio_resources[0].start = (1 << 9);
+	vip_gpio_resources[0].end = vip_gpio_resources[0].start;
+
+	platform_device_register(&vip_gpio);
+
+	platform_device_register(&vip_npeb_device_rev0);
+	platform_device_register(&vip_npec_device);
+
+	vip_gpio_buttons_data.buttons[0].gpio = 9;
+	platform_device_register(&vip_gpio_buttons_device);
+
+}
+
+static struct vip_board_info vip_boards[] __initdata = {
+	{
+		.model		= "ipmesh_board",
+		.setup		= vip_board_ipmesh_setup,
+	},{
+		.model		= "vip2_board",
+		.setup		= vip_board_setup,
+	},{
+
+		.model		= "vip_b_rev0",
+		.setup		= vip_board_rev0_setup,
+	}
+};
+
+static struct vip_board_info * __init vip_find_board_info(char *model)
+{
+	int i;
+
+	for (i = 0; i < ARRAY_SIZE(vip_boards); i++) {
+		struct vip_board_info *info = &vip_boards[i];
+		if (strcmp(info->model, model) == 0)
+			return info;
+	}
+
+	return NULL;
+}
+
+static void __init vip_init(void)
+{
+
+	ixp4xx_sys_init();
+
+	/*
+	 * These devices are present on all Avila models and don't need any
+	 * model specific setup.
+	 */
+	vip_flash_resource.start = IXP4XX_EXP_BUS_BASE(0);
+	vip_flash_resource.end =
+		IXP4XX_EXP_BUS_BASE(0) + ixp4xx_exp_bus_size - 1;
+
+	platform_add_devices(vip_devices, ARRAY_SIZE(vip_devices));
+
+}
+
+static int __init vip_model_setup(void)
+{
+	int revision = (*IXP4XX_EXP_CFG0 >> 17) & 0xf;
+	char *t_model = NULL;
+
+	printk("vip setup revision = %d\n",revision);
+
+	if (!machine_is_vip())
+		return 0;
+
+	if(revision == 4) {
+		t_model="ipmesh_board";
+	}
+	else if((revision == 2) ||(revision == 3)) {
+		t_model="vip2_board";
+	} else {
+		t_model="vip_b_rev0";
+	}
+
+	vip_info = vip_find_board_info(t_model);
+
+	if (vip_info) {
+		printk("Running on Microhard %s\n",
+							vip_info->model);
+		vip_info->setup();
+	} else {
+		printk("Unknown/missing  model number"
+						" -- defaults will be used\n");
+		vip_board_setup();
+	}
+
+	return 0;
+}
+late_initcall(vip_model_setup);
+
+MACHINE_START(VIP, "Microhard VIP Network Platform")
+	/* Maintainer: Deepak Saxena <dsaxena@plexity.net> */
+	.phys_io	= IXP4XX_PERIPHERAL_BASE_PHYS,
+	.io_pg_offst	= ((IXP4XX_PERIPHERAL_BASE_VIRT) >> 18) & 0xfffc,
+	.map_io		= ixp4xx_map_io,
+	.init_irq	= ixp4xx_init_irq,
+	.timer		= &ixp4xx_timer,
+	.boot_params	= 0x0100,
+	.init_machine	= vip_init,
+MACHINE_END
+
diff -Nuar linux-2.6.30.10.bak/arch/arm/tools/mach-types linux-2.6.30.10/arch/arm/tools/mach-types
--- linux-2.6.30.10.bak/arch/arm/tools/mach-types	2010-08-20 13:50:03.000000000 -0600
+++ linux-2.6.30.10/arch/arm/tools/mach-types	2010-08-20 13:51:35.000000000 -0600
@@ -1330,7 +1330,7 @@
 comtech_router		MACH_COMTECH_ROUTER	COMTECH_ROUTER		1327
 sbc2410x		MACH_SBC2410X		SBC2410X		1328
 at4x0bd			MACH_AT4X0BD		AT4X0BD			1329
-cbifr			MACH_CBIFR		CBIFR			1330
+vip			MACH_VIP		VIP			1330
 arcom_quantum		MACH_ARCOM_QUANTUM	ARCOM_QUANTUM		1331
 matrix520		MACH_MATRIX520		MATRIX520		1332
 matrix510		MACH_MATRIX510		MATRIX510		1333
diff -Nuar linux-2.6.30.10.bak/fs/mini_fo/main.c linux-2.6.30.10/fs/mini_fo/main.c
--- linux-2.6.30.10.bak/fs/mini_fo/main.c	2010-08-20 13:48:58.000000000 -0600
+++ linux-2.6.30.10/fs/mini_fo/main.c	2010-08-20 13:51:35.000000000 -0600
@@ -179,7 +179,7 @@
 		*tmp = '\0';
 		if (!strncmp("base=", options, 5)) {
 			name = options + 5;
-			printk(KERN_INFO "mini_fo: using base directory: %s\n", name);
+		//	printk(KERN_INFO "mini_fo: using base directory: %s\n", name);
 
 #if LINUX_VERSION_CODE < KERNEL_VERSION(2,6,0)
 			if (path_init(name, LOOKUP_FOLLOW, &nd))
@@ -199,7 +199,7 @@
 		} else if(!strncmp("sto=", options, 4)) {
 			/* parse the storage dir */
 			name = options + 4;
-			printk(KERN_INFO "mini_fo: using storage directory: %s\n", name);
+		//	printk(KERN_INFO "mini_fo: using storage directory: %s\n", name);
 #if LINUX_VERSION_CODE < KERNEL_VERSION(2,6,0)
 			if(path_init(name, LOOKUP_FOLLOW, &nd2))
 				err = path_walk(name, &nd2);
diff -Nuar linux-2.6.30.10.bak/init/main.c linux-2.6.30.10/init/main.c
--- linux-2.6.30.10.bak/init/main.c	2010-08-20 13:49:30.000000000 -0600
+++ linux-2.6.30.10/init/main.c	2010-08-20 13:51:35.000000000 -0600
@@ -77,6 +77,8 @@
 #include <asm/smp.h>
 #endif
 
+extern int console_quiet;
+
 static int kernel_init(void *);
 
 extern void init_IRQ(void);
@@ -566,7 +568,7 @@
 	tick_init();
 	boot_cpu_init();
 	page_address_init();
-	printk(KERN_NOTICE "%s", linux_banner);
+//	printk(KERN_NOTICE "%s", linux_banner);
 	setup_arch(&command_line);
 	mm_init_owner(&init_mm, &init_task);
 	setup_command_line(command_line);
@@ -814,6 +816,8 @@
 	if (sys_open((const char __user *) "/dev/console", O_RDWR, 0) < 0)
 		printk(KERN_WARNING "System Loading ...\n");
 
+	console_quiet=0;
+
 	(void) sys_dup(0);
 	(void) sys_dup(0);
 
diff -Nuar linux-2.6.30.10.bak/kernel/printk.c linux-2.6.30.10/kernel/printk.c
--- linux-2.6.30.10.bak/kernel/printk.c	2010-08-20 13:49:06.000000000 -0600
+++ linux-2.6.30.10/kernel/printk.c	2010-08-20 13:51:35.000000000 -0600
@@ -36,6 +36,9 @@
 
 #include <asm/uaccess.h>
 
+extern int console_quiet;
+extern int super_user;
+
 /*
  * Architectures can override it:
  */
@@ -578,11 +581,27 @@
 	va_list args;
 	int r;
 
-	va_start(args, fmt);
-	r = vprintk(fmt, args);
-	va_end(args);
+//	va_start(args, fmt);
+//	r = vprintk(fmt, args);
+//	va_end(args);
+
+//	return r;
+
+	if((console_quiet==0)||(super_user ==1)) {
+		va_start(args, fmt);
+		r = vprintk(fmt, args);
+		va_end(args);
+  
+		return r;
+	}else if (console_quiet==2) {
+		fmt=".";
+		va_start(args, fmt);
+		r = vprintk(fmt, args);
+		va_end(args);
+		return r;
+	}else
+		return 0;
 
-	return r;
 }
 
 /* cpu currently holding logbuf_lock */
@@ -702,9 +721,24 @@
 			}
 
 			/* Always output the token */
-			emit_log_char('<');
-			emit_log_char(current_log_level + '0');
-			emit_log_char('>');
+//			emit_log_char('<');
+//			emit_log_char(current_log_level + '0');
+//			emit_log_char('>');
+
+			if(console_quiet==0) {
+				emit_log_char('<');
+				emit_log_char(current_log_level + '0');
+				emit_log_char('>');
+			} else if(console_quiet==2) {
+				emit_log_char('.');
+				emit_log_char('.');
+				emit_log_char('.');
+			} else {
+				emit_log_char(' ');
+				emit_log_char(' ');
+				emit_log_char(' ');
+			}
+
 			printed_len += 3;
 			new_text_line = 0;
 
