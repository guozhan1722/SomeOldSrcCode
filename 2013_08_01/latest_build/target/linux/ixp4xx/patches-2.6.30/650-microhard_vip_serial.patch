diff -Nuar linux_old/drivers/serial/8250.c linux_new/drivers/serial/8250.c
--- linux_old/drivers/serial/8250.c	2011-03-01 11:39:52.000000000 -0700
+++ linux_new/drivers/serial/8250.c	2011-03-03 15:34:27.000000000 -0700
@@ -100,6 +100,29 @@
  * files have been cleaned.
  */
 #define CONFIG_HUB6 1
+#define MICROHARD_485 1
+#if defined(MICROHARD_485)
+/*
+ *      The XSCALE/IXP425 does not wire out the DCD, DSR and DTR lines.
+ *      We implement them using GPIO lines on the VIPnnnn boards.
+ */
+#include <mach/hardware.h>
+#define CONFIG_IXP4XX_DTR0      1
+#define CONFIG_IXP4XX_DCD0      2
+#define CONFIG_IXP4XX_DSR0      0
+#define CONFIG_IXP4XX_DSR0IRQ	IRQ_IXP4XX_GPIO0
+
+#define GPIO_RS485_RX           3
+#define GPIO_RS485_TX           4
+
+#define LEDMAN_COM1_RX		0x02
+#define LEDMAN_COM1_TX		0x01
+#define LEDMAN_COM2_RX		0
+#define LEDMAN_COM2_TX		0
+static volatile unsigned char *ledman_data;
+static volatile unsigned char led_val;
+static int revision ;
+#endif
 
 #include <asm/serial.h>
 /*
@@ -1400,6 +1423,11 @@
 	int max_count = 256;
 	char flag;
 
+#ifdef MICROHARD_485
+	if(up->port.line == 0 && revision != 5 && revision != 4){
+		*ledman_data =  ~LEDMAN_COM1_RX ;
+	}
+#endif
 	do {
 		if (likely(lsr & UART_LSR_DR))
 			ch = serial_inp(up, UART_RX);
@@ -1468,11 +1496,50 @@
 	*status = lsr;
 }
 
+#ifdef MICROHARD_485
+#define BOTH_EMPTY (UART_LSR_TEMT | UART_LSR_THRE)
+/*
+ *	Wait for transmitter & holding register to empty
+ */
+static inline void my_wait_for_xmitr(struct uart_8250_port *up, int bits)
+{
+	unsigned int status, tmout = 10000;
+
+	/* Wait up to 10ms for the character(s) to be sent. */
+	do {
+		status = serial_in(up, UART_LSR);
+
+		up->lsr_saved_flags |= status & LSR_SAVE_FLAGS;
+
+		if (--tmout == 0)
+			break;
+		udelay(1);
+	} while ((status & bits) != bits);
+
+	/* Wait up to 1s for flow control if necessary */
+	if (up->port.flags & UPF_CONS_FLOW) {
+		unsigned int tmout;
+		for (tmout = 1000000; tmout; tmout--) {
+			unsigned int msr = serial_in(up, UART_MSR);
+			up->msr_saved_flags |= msr & MSR_SAVE_FLAGS;
+			if (msr & UART_MSR_CTS)
+				break;
+			udelay(1);
+			touch_nmi_watchdog();
+		}
+	}
+}
+
+#endif
+
 static void transmit_chars(struct uart_8250_port *up)
 {
 	struct circ_buf *xmit = &up->port.info->xmit;
 	int count;
 
+#ifdef MICROHARD_485
+    int gpio3, gpio4;
+#endif
 	if (up->port.x_char) {
 		serial_outp(up, UART_TX, up->port.x_char);
 		up->port.icount.tx++;
@@ -1487,6 +1554,22 @@
 		__stop_tx(up);
 		return;
 	}
+#ifdef MICROHARD_485
+	if(up->port.line == 0 && revision != 5 && revision != 4){
+		*ledman_data = ~LEDMAN_COM1_TX ;
+	} 
+#endif
+#ifdef MICROHARD_485
+	gpio_line_get(GPIO_RS485_RX ,&gpio3);
+    gpio_line_get(GPIO_RS485_TX ,&gpio4);
+    
+    //Enable RS485-2 wire TX and disable RX
+    if(up->port.line == 0 && gpio4 == 0 && gpio3 == 0)
+    {
+        gpio_line_set(GPIO_RS485_RX, IXP4XX_GPIO_HIGH);
+        gpio_line_set(GPIO_RS485_TX, IXP4XX_GPIO_HIGH);
+    }
+#endif
 
 	count = up->tx_loadsz;
 	do {
@@ -1497,6 +1580,18 @@
 			break;
 	} while (--count > 0);
 
+#ifdef MICROHARD_485
+    gpio_line_get(GPIO_RS485_RX ,&gpio3);
+    gpio_line_get(GPIO_RS485_TX ,&gpio4);
+    
+    //Enable RS485-2 wire RX and disable TX
+    if(up->port.line == 0 && gpio3 == 1 && gpio4 == 1)
+    {
+        my_wait_for_xmitr(up, BOTH_EMPTY);
+        gpio_line_set(GPIO_RS485_RX, IXP4XX_GPIO_LOW);
+        gpio_line_set(GPIO_RS485_TX, IXP4XX_GPIO_LOW);
+    }
+#endif
 	if (uart_circ_chars_pending(xmit) < WAKEUP_CHARS)
 		uart_write_wakeup(&up->port);
 
@@ -1693,6 +1788,13 @@
 
 		ret = request_irq(up->port.irq, serial8250_interrupt,
 				  irq_flags, "serial", i);
+#ifdef MICROHARD_DSR0
+		{
+			static irqreturn_t serial8250_interrupt_dsr(int irq, void *dev_id, struct pt_regs *regs);
+			request_irq(CONFIG_IXP4XX_DSR0IRQ, serial8250_interrupt_dsr, SA_SHIRQ,
+				"serial(DSR)", up);
+		}
+#endif
 		if (ret < 0)
 			serial_do_unlink(i, up);
 	}
@@ -1816,6 +1918,23 @@
 
 	status = check_modem_status(up);
 
+#ifdef MICROHARD_DSR0
+	if (port->line == 0) {
+		int val;
+		gpio_line_get(CONFIG_IXP4XX_DSR0, &val);
+		status &= ~UART_MSR_DSR;
+		status |= (val ? 0 : UART_MSR_DSR);
+	}
+#endif
+
+#ifdef MICROHARD_DTR0
+	if (port->line == 0) {
+		int val;
+		gpio_line_get(CONFIG_IXP4XX_DTR0, &val);
+		status &= ~UART_MSR_DCD;
+		status |= (val ? 0 : UART_MSR_DCD);
+	}
+#endif
 	ret = 0;
 	if (status & UART_MSR_DCD)
 		ret |= TIOCM_CAR;
@@ -1847,6 +1966,24 @@
 	mcr = (mcr & up->mcr_mask) | up->mcr_force | up->mcr;
 
 	serial_out(up, UART_MCR, mcr);
+
+#ifdef MICROHARD_DTR0
+	if (port->line == 0) {
+		if (mcr & UART_MCR_DTR)
+			gpio_line_set(CONFIG_IXP4XX_DTR0, 0);
+		else
+			gpio_line_set(CONFIG_IXP4XX_DTR0, 1);
+	}
+#endif
+
+#ifdef MICROHARD_DCD0
+	if (port->line == 0) {
+		if (mcr & UART_MSR_DCD)
+			gpio_line_set(CONFIG_IXP4XX_DCD0, 0);
+        else 
+			gpio_line_set(CONFIG_IXP4XX_DCD0, 1);
+	}
+#endif
 }
 
 static void serial8250_break_ctl(struct uart_port *port, int break_state)
@@ -3179,10 +3316,20 @@
 	if (nr_uarts > UART_NR)
 		nr_uarts = UART_NR;
 
+#ifdef MICROHARD_485
+	revision = (*IXP4XX_EXP_CFG0 >> 17) & 0xf;
+	*IXP4XX_EXP_CS2 = 0xbfff0003;
+	ledman_data = (volatile unsigned char *) ioremap((IXP4XX_EXP_BUS_BASE_PHYS + 0x02000000), 512);
+
+	printk(KERN_INFO "Serial: 8250/16550 driver, "
+		"%d ports, IRQ sharing %sabled and ioremap value %x at address %x\n", nr_uarts,
+		share_irqs ? "en" : "dis",*ledman_data,ledman_data);
+#else
 	printk(KERN_INFO "Serial: 8250/16550 driver, "
 		"%d ports, IRQ sharing %sabled\n", nr_uarts,
 		share_irqs ? "en" : "dis");
 
+#endif
 #ifdef CONFIG_SPARC
 	ret = sunserial_register_minors(&serial8250_reg, UART_NR);
 #else
